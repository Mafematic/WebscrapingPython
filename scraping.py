import requests from bs4 import BeautifulSoupimport reimport pprintdef sort_stories(li, dict_value):     return sorted(li, key = lambda i: i[dict_value], reverse=True)    def create_custom_hn(links, subtext):            hn = []    for idx, item in enumerate(links):         title = links[idx].getText()        href = links[idx].get('href', None)        vote = subtext[idx].select('.score')        if len(vote):             #print(vote)            points = int(vote[0].getText().replace(' points', ''))            if points > 100:             #print(points)                hn.append({'title': title, 'link': href, 'points': points})         #hn.append({'title': title, 'link': href, 'points': 0})    hn = sort_stories(hn, 'points')                        # Different Solution                # hn = []        # link_li = []        # regex = re.compile('(<a.*href=")(.*)(">)(.*)(<\/a>)')        # for link in links:        #     m = regex.search(str(link))                #     if m:         #         hn.append(m.group(4))        #         link_li.append(m.group(2))        #         #print(m.group(2))                        # print(hn)        # print(link_li)            return hndef order_pages(numPages):     final = []        for i in range(1,numPages+1):                        res = requests.get('https://news.ycombinator.com/news?p=' + str(i))        soup = BeautifulSoup(res.text, 'html.parser')        links = soup.select('.storylink')        subtext = soup.select('.subtext')                for e in create_custom_hn(links, subtext):             final.append(e)                #print(final[0])        final = sort_stories(final, 'points')    return final        pprint.pprint(order_pages(10))